#!/bin/bash -e

: ${BODMAN_RUN_DIR="/var/cache/bodman"}
: ${BODMAN_RUNC="$( (which runc || which crun) 2>/dev/null)"}

_bodman_init() {
  mkdir -p ${BODMAN_RUN_DIR}
  cd ${BODMAN_RUN_DIR}
  ostree init --mode=bare-user --repo=images
}

_bodman_parse_index() {
python3 -c '
import sys
import json
manifests = json.load(sys.stdin)["manifests"]
if len(manifests) > 1:
  raise NotImplementedError("Multiple mainfests in index.json")
print(manifests[0]["digest"].replace(":", "/"))
'
}

_bodman_parse_manifest_get_layer() {
python3 -c '
import sys
import json
layers = json.load(sys.stdin)["layers"]
if any(l["mediaType"] != "application/vnd.oci.image.layer.v1.tar+gzip" for l in layers):
  raise NotImplementedError("Only support mediaType:application/vnd.oci.image.layer.v1.tar+gzip")
print("\n".join(l["digest"].replace(":", "/") for l in layers))
'
}

_bodman_parse_manifest_get_config() {
python3 -c '
import sys
import json
config = json.load(sys.stdin)["config"]
if config["mediaType"] != "application/vnd.oci.image.config.v1+json":
  raise NotImplementedError("Only support mediaType:application/vnd.oci.image.config.v1+json")
print(config["digest"].replace(":", "/"))
'
}

bodman_pull() {
  IMAGE_NAME=$1
  WORKSPACE=$(mktemp -d)
  IMAGE_TEMP=${WORKSPACE}/image
  BUILD_TEMP=${WORKSPACE}/build
  trap "[ -z ${WORKSPACE} ] || rm -rf ${WORKSPACE}" EXIT INT TERM

  skopeo copy docker://${IMAGE_NAME} oci:${IMAGE_TEMP}
  IMAGE_MANIFEST=$(cat ${IMAGE_TEMP}/index.json | _bodman_parse_index)
  mkdir -p ${BUILD_TEMP}/rootfs
  for IMAGE_LAYER in $(cat ${IMAGE_TEMP}/blobs/${IMAGE_MANIFEST} | _bodman_parse_manifest_get_layer); do
    tar -xf ${IMAGE_TEMP}/blobs/${IMAGE_LAYER} -C ${BUILD_TEMP}/rootfs --overwrite
  done
  IMAGE_CONFIG=$(cat ${IMAGE_TEMP}/blobs/${IMAGE_MANIFEST} | _bodman_parse_manifest_get_config)
  cp ${IMAGE_TEMP}/blobs/${IMAGE_CONFIG} ${BUILD_TEMP}/manifest.json
  ostree --repo=images commit -b ociimage/${IMAGE_NAME//:/____} --tree=dir=${BUILD_TEMP}
}

__bodman_run_generate_runc_config() {
echo -e "${CONTAINERS_DIR}\n${CONTAINER_UUID}\n${BODMAN_RUNC}" | python3 -c '
import argparse
import json
import os
parser = argparse.ArgumentParser(add_help=False)
parser.add_argument("--env", "-e", type=str, action="append", default=[])
parser.add_argument("--hostname", "-h", type=str)
parser.add_argument("--tty", "-t", action="store_true")
parser.add_argument("--user", "-u", type=lambda x: [int(i) for i in x.split(":")], default=[])
parser.add_argument("--volume", "-v", type=lambda x: x.split(":"), action="append", default=[])
parser.add_argument("--workdir", "-w", type=str, default="/")
parser.add_argument("image")
parser.add_argument("commands", nargs=argparse.REMAINDER)
args = parser.parse_args()
image = args.image.replace(":", "____")
containers_dir = input()
container_uuid = input()
bodman_runc = input()

os.system(f"ostree --repo=images checkout ociimage/{image} {containers_dir}/{container_uuid}")
os.chdir(f"{containers_dir}/{container_uuid}")
os.system(f"{bodman_runc} spec")

with open("manifest.json") as f:
  image_config = json.load(f).get("config", {})
with open("config.json") as f:
  runc_config = json.load(f)

# https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities
cap = ["CAP_" + c for c in ["SETPCAP", "MKNOD", "AUDIT_WRITE", "CHOWN", "NET_RAW", "DAC_OVERRIDE",
       "FOWNER", "FSETID", "KILL", "SETGID", "SETUID", "NET_BIND_SERVICE", "SYS_CHROOT", "SETFCAP"]]
for k in runc_config["process"]["capabilities"].keys():
  runc_config["process"]["capabilities"][k] = cap
runc_config["process"]["env"] = image_config.get("Env") + args.env
runc_config["hostname"] = args.hostname or container_uuid.split("-")[0]
runc_config["linux"]["namespaces"].remove({ "type": "network" }) # --net=host
runc_config["process"]["terminal"] = args.tty
runc_config["process"]["user"]["uid"] = args.user[0] if len(args.user) > 0 else 0
runc_config["process"]["user"]["gid"] = args.user[1] if len(args.user) > 1 else 0
for mount in args.volume:
  if len(mount) < 2:
    raise AssertionError("--volume src:dst")
  if not os.path.isabs(mount[0]):
    raise NotImplementedError("Source must be absolute path")
  runc_config["mounts"].append({
      "destination": mount[1],
      "type": "bind",
      "source": mount[0],
      "options": ["rbind","rw"],
  })
runc_config["process"]["cwd"] = args.workdir
runc_config["process"]["args"] = image_config.get("Entrypoint", []) + (args.commands or image_config.get("Cmd"))

with open("config.json", "w") as f:
  json.dump(runc_config, f)
' "$@"
}

bodman_run() {
  CONTAINERS_DIR=${BODMAN_RUN_DIR}/containers
  CONTAINER_UUID=$(python3 -c 'import uuid; print(uuid.uuid4())')
  mkdir -p ${CONTAINERS_DIR}

  __bodman_run_generate_runc_config "$@"
  exec 200>${CONTAINERS_DIR}/${CONTAINER_UUID}/running.lock
  flock -n 200
  exec crun run --bundle ${CONTAINERS_DIR}/${CONTAINER_UUID} ${CONTAINER_UUID}
}

_bodman_init && bodman_"$1" "${@:2}"
